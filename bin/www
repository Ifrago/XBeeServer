#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('XBee:server');
var https = require('https');
var http= require('http');
var fs = require('fs');
var options = {

  // The Server's SSL Key
  key: fs.readFileSync('./certs/server/private/serverXBee.key'),
  // The Server's Cert

  cert: fs.readFileSync('./certs/server/serverXBee.crt'),

  // The CA (us in this case)
  ca: fs.readFileSync('./certs/ca/ca.crt'),
 // Ask for the client's cert
  requestCert: true,
  // Don't automatically reject
  rejectUnauthorized: false
};



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 443);
app.set('port', port);

//* Create HTTP server.

/*
var server = https.createServer(options, app, function(req, res, next){
  if(req.client.authorized){
    res.writeHead(200, {"Contet-Type":"application/json"});
    res.send('{"status":"approved"}');
  }else{
    res.writeHead(401, {"Contet-Type":"application/json"});
    res.send('{"status":"denied"}');
  }
});
*/

var server = https.createServer(options,app);
//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log('Server listening...');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}